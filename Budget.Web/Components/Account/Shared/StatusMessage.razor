@if (!string.IsNullOrEmpty(DisplayMessage))
{
    var statusMessageClass = DisplayMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass" role="alert">
        @DisplayMessage
    </div>
}

@code {
    private string? messageFromCookie;

    [Parameter]
    public string? Message { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? DisplayMessage => Message ?? messageFromCookie;

    protected override void OnInitialized()
    {
        // Only try to access HttpContext if it's available (during static rendering)
        if (HttpContext?.Request?.Cookies != null)
        {
            try
            {
                messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusCookieName];

                if (messageFromCookie is not null && HttpContext.Response != null)
                {
                    HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
                }
            }
            catch (Exception)
            {
                // Silently handle cases where cookie operations are not available
                // This can happen during interactive rendering
            }
        }
    }
}
