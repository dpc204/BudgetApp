@page "/Admin/Users/Edit/{Id}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Budget.Web.Data
@inject UserManager<BudgetUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Nav

<h1>Edit User</h1>
@if (user is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="model.Email" />
        </div>
        <fieldset class="mb-3">
            <legend class="h6">Roles</legend>
            @foreach (var r in allRoles)
            {
                var assigned = model.Roles.Contains(r);
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" checked="@assigned" @onchange="e => Toggle(r, (bool)e.Value!)" />
                    <label class="form-check-label">@r</label>
                </div>
            }
        </fieldset>
        <button class="btn btn-primary" type="submit">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick='() => Nav.NavigateTo("/Admin/Users")'>Back</button>
    </EditForm>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private BudgetUser? user;
    private EditModel model = new();
    private List<string> allRoles = new();

    private sealed class EditModel
    {
        public string Email { get; set; } = string.Empty;
        public HashSet<string> Roles { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(Id);
        if (user == null) return;
        model.Email = user.Email ?? string.Empty;
        allRoles = RoleManager.Roles.Select(r => r.Name!).OrderBy(n => n).ToList();
        var current = await UserManager.GetRolesAsync(user);
        model.Roles = new HashSet<string>(current);
    }

    private void Toggle(string role, bool selected)
    {
        if (selected) model.Roles.Add(role); else model.Roles.Remove(role);
    }

    private async Task Save()
    {
        if (user == null) return;
        if (!string.Equals(user.Email, model.Email, StringComparison.OrdinalIgnoreCase))
        {
            user.Email = model.Email;
            user.UserName = model.Email;
            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded) return;
        }
        var existing = await UserManager.GetRolesAsync(user);
        var toAdd = model.Roles.Except(existing).ToList();
        var toRemove = existing.Except(model.Roles).ToList();
        if (toAdd.Count > 0) await UserManager.AddToRolesAsync(user, toAdd);
        if (toRemove.Count > 0) await UserManager.RemoveFromRolesAsync(user, toRemove);
        Nav.NavigateTo("/Admin/Users");
    }
}
