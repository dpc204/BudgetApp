// <auto-generated />
using System;
using Budget.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Budget.DB.Migrations
{
    [DbContext(typeof(BudgetContext))]
    partial class BudgetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("budget")
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Budget.DB.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastTransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LastTransactionId");

                    b.ToTable("BankAccounts", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 0,
                            Balance = 0m,
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Citizens"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 1,
                            Balance = 0m,
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Discover"
                        });
                });

            modelBuilder.Entity("Budget.DB.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Frequent",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Regular",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("Budget.DB.Envelope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Budget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastTransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("LastTransactionLineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastTransactionId", "LastTransactionLineId");

                    b.ToTable("Envelopes", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 1,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dining Out",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 1,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Groceries",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 1,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gas",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 2,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Car Maint",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 2,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "House Maint",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            Budget = 0m,
                            CategoryId = 2,
                            Description = "",
                            LastTransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Medical",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("Budget.DB.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FavoriteType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites", "budget");
                });

            modelBuilder.Entity("Budget.DB.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAfterTransaction")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            BalanceAfterTransaction = 0m,
                            Date = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 104.00m,
                            UserId = 1,
                            Vendor = "Giant"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            BalanceAfterTransaction = 0m,
                            Date = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 48m,
                            UserId = 1,
                            Vendor = "Bonefish"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            BalanceAfterTransaction = 0m,
                            Date = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 12.50m,
                            UserId = 1,
                            Vendor = "Gas"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 2,
                            BalanceAfterTransaction = 0m,
                            Date = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 30.00m,
                            UserId = 2,
                            Vendor = "Home Depot"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 1,
                            BalanceAfterTransaction = 0m,
                            Date = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 32.00m,
                            UserId = 2,
                            Vendor = "CVS"
                        });
                });

            modelBuilder.Entity("Budget.DB.TransactionDetail", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EnvelopeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TransactionId", "LineId");

                    b.HasIndex("EnvelopeId");

                    b.ToTable("TransactionDetails", "budget");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            LineId = 1,
                            Amount = 52m,
                            EnvelopeId = 2,
                            Notes = "Yasso"
                        },
                        new
                        {
                            TransactionId = 1,
                            LineId = 2,
                            Amount = 52m,
                            EnvelopeId = 6,
                            Notes = "Cough supresent"
                        },
                        new
                        {
                            TransactionId = 2,
                            LineId = 1,
                            Amount = 48m,
                            EnvelopeId = 1,
                            Notes = "din din"
                        },
                        new
                        {
                            TransactionId = 3,
                            LineId = 1,
                            Amount = 10m,
                            EnvelopeId = 3,
                            Notes = ""
                        },
                        new
                        {
                            TransactionId = 3,
                            LineId = 2,
                            Amount = 2.5m,
                            EnvelopeId = 2,
                            Notes = "Tic Tacs"
                        },
                        new
                        {
                            TransactionId = 4,
                            LineId = 1,
                            Amount = 27m,
                            EnvelopeId = 5,
                            Notes = "Plumbing"
                        },
                        new
                        {
                            TransactionId = 4,
                            LineId = 2,
                            Amount = 3m,
                            EnvelopeId = 2,
                            Notes = "Candy"
                        },
                        new
                        {
                            TransactionId = 5,
                            LineId = 1,
                            Amount = 20m,
                            EnvelopeId = 6,
                            Notes = "Prescriptions"
                        },
                        new
                        {
                            TransactionId = 5,
                            LineId = 2,
                            Amount = 4m,
                            EnvelopeId = 2,
                            Notes = "Gum"
                        },
                        new
                        {
                            TransactionId = 5,
                            LineId = 3,
                            Amount = 8m,
                            EnvelopeId = 5,
                            Notes = "Light Bulbs"
                        });
                });

            modelBuilder.Entity("Budget.DB.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", "budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Patrick",
                            LastName = "Connelly"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Terri",
                            LastName = "Connelly"
                        });
                });

            modelBuilder.Entity("Budget.DB.BankAccount", b =>
                {
                    b.HasOne("Budget.DB.Transaction", "LastTransaction")
                        .WithMany()
                        .HasForeignKey("LastTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastTransaction");
                });

            modelBuilder.Entity("Budget.DB.Envelope", b =>
                {
                    b.HasOne("Budget.DB.Category", "Category")
                        .WithMany("Envelopes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.DB.TransactionDetail", "LastTransactionDetail")
                        .WithMany()
                        .HasForeignKey("LastTransactionId", "LastTransactionLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("LastTransactionDetail");
                });

            modelBuilder.Entity("Budget.DB.Favorite", b =>
                {
                    b.HasOne("Budget.DB.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.DB.Transaction", b =>
                {
                    b.HasOne("Budget.DB.BankAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Budget.DB.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.DB.TransactionDetail", b =>
                {
                    b.HasOne("Budget.DB.Envelope", "Envelope")
                        .WithMany("Details")
                        .HasForeignKey("EnvelopeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Budget.DB.Transaction", "Transaction")
                        .WithMany("Details")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Envelope");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Budget.DB.Category", b =>
                {
                    b.Navigation("Envelopes");
                });

            modelBuilder.Entity("Budget.DB.Envelope", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Budget.DB.Transaction", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Budget.DB.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
