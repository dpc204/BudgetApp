@using Budget.Shared.Models
@using Budget.Client.Services
@using Budget.Shared.Services

<h3>Envelopes</h3>

@if (_envelopes is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-sm btn-primary" @onclick="ShowCreate">New</button>
    <table class="table table-striped mt-2">
        <thead>
        <tr>
            <th>Category</th>
            <th>Name</th>
            <th>Budget</th>
            <th>Balance</th>
            <th>Description</th>
            <th>Sort</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var e in _envelopes)
        {
            <tr>
                <td>@e.CategoryId</td>
                <td>@e.Name</td>
                <td>@e.Budget</td>
                <td>@e.Balance</td>
                <td>@e.Description</td>
                <td>@e.SortOrder</td>
                <td>
                    <button class="btn btn-sm btn-secondary me-1" @onclick="() => BeginEdit(e.Id)">Edit</button>
                    <button class="btn btn-sm btn-info me-1" @onclick="() => ViewDetails(e.Id)">Details</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => BeginDelete(e.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_showCreate)
{
    <EnvelopeCreate OnCreated="HandleCreated" OnCancel="CloseDialogs" />
}
@if (_editId.HasValue)
{
    <EnvelopeEdit Id="_editId.Value" OnSaved="HandleSaved" OnCancel="CloseDialogs" />
}
@if (_detailsId.HasValue)
{
    <EnvelopeDetails Id="_detailsId.Value" OnClose="CloseDialogs" />
}
@if (_deleteId.HasValue)
{
    <EnvelopeDelete Id="_deleteId.Value" OnDeleted="HandleDeleted" OnCancel="CloseDialogs" />
}

@code {
  private List<EnvelopeDto>? _envelopes;
  private bool _showCreate;
  private int? _editId;
  private int? _detailsId;
  private int? _deleteId;
  private IBudgetMaintApiClient? MaintApi;


  protected override async Task OnInitializedAsync()
  {
    MaintApi= ServiceAccessor.GetRequiredService<IBudgetMaintApiClient>();
      await LoadAsync();
  }

    private async Task LoadAsync() => _envelopes = (await MaintApi.GetEnvelopesDtoAsync()).ToList();

    private void ShowCreate() => _showCreate = true;
    private void BeginEdit(int id) => _editId = id;
    private void ViewDetails(int id) => _detailsId = id;
    private void BeginDelete(int id) => _deleteId = id;

    private async Task HandleCreated(EnvelopeDto _) => await ReloadAndClose();
    private async Task HandleSaved(EnvelopeDto _) => await ReloadAndClose();
    private async Task HandleDeleted(int _) => await ReloadAndClose();

    private async Task ReloadAndClose()
    {
        CloseDialogs();
        await LoadAsync();
        StateHasChanged();
    }

    private void CloseDialogs()
    {
        _showCreate = false;
        _editId = null;
        _detailsId = null;
        _deleteId = null;
    }
}
