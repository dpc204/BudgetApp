@using Budget.Shared.Models
@using Budget.Client.Services
@inject BudgetMaintApiClient MaintApi

<h3>Edit Envelope</h3>
<hr />
@if (_envelope is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="_envelope" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label">Category</label>
                    <InputNumber class="form-control" @bind-Value="_envelope.CategoryId" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="_envelope.Name" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Budget</label>
                    <InputNumber class="form-control" @bind-Value="_envelope.Budget" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Balance</label>
                    <InputNumber class="form-control" @bind-Value="_envelope.Balance" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Description</label>
                    <InputText class="form-control" @bind-Value="_envelope.Description" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Sort</label>
                    <InputNumber class="form-control" @bind-Value="_envelope.SortOrder" />
                </div>
                <button class="btn btn-primary me-2" type="submit">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="() => OnCancel.InvokeAsync()">Cancel</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/envelopes">Back to List</a>
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<EnvelopeDto> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EnvelopeDto? _envelope;

    protected override async Task OnParametersSetAsync()
    {
        var list = await MaintApi.GetEnvelopesDtoAsync();
        _envelope = list.FirstOrDefault(e => e.Id == Id);
    }

    private async Task SaveAsync()
    {
        var updated = await MaintApi.UpdateAsync(_envelope!);
        await OnSaved.InvokeAsync(updated);
    }
}
