@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<h3>Edit Envelope</h3>
<hr />
@if (_envelope is null || _categories is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_envelope" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label class="form-label">Category</label>
            <InputSelect class="form-select" @bind-Value="_envelope.CategoryId">
                @foreach (var c in _categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="_envelope.Name" />
        </div>
        <div class="mb-2">
            <label class="form-label">Budget</label>
            <InputNumber class="form-control" @bind-Value="_envelope.Budget" />
        </div>
        <div class="mb-2">
            <label class="form-label">Balance</label>
            <InputNumber class="form-control" @bind-Value="_envelope.Balance" />
        </div>
        <div class="mb-2">
            <label class="form-label">Description</label>
            <InputText class="form-control" @bind-Value="_envelope.Description" />
        </div>
        <div class="mb-2">
            <label class="form-label">Sort</label>
            <InputNumber class="form-control" @bind-Value="_envelope.SortOrder" />
        </div>
        <button class="btn btn-primary me-2" type="submit">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="() => OnCancel.InvokeAsync()">Cancel</button>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<EnvelopeDto> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EnvelopeDto? _envelope;
    private List<CategoryDto>? _categories;

    protected override async Task OnParametersSetAsync()
    {
        var list = await MaintApi.GetEnvelopesDtoAsync();
        _envelope = list.FirstOrDefault(e => e.Id == Id);
        _categories = (await MaintApi.GetCategoriesAsync()).OrderBy(c => c.SortOrder).ThenBy(c => c.Name).ToList();
        if (_envelope is not null && _envelope.CategoryId == 0 && _categories.Count > 0)
            _envelope.CategoryId = _categories[0].Id;
    }

    private async Task SaveAsync()
    {
        var updated = await MaintApi.UpdateAsync(_envelope!);
        await OnSaved.InvokeAsync(updated);
    }
}
