@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<MudDialog>
  <DialogContent>
    @if (_account is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <EditForm Model="_account" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />
            <MudStack Spacing="2">
                <MudTextField @bind-Value="_account.Name" Label="Name" For="() => _account.Name" Required="true" />
                <MudNumericField @bind-Value="_account.Balance" Label="Balance" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined" />
                <MudSelect T="BankAccountType" @bind-Value="_account.AccountType" Label="Type" Required="true">
                    @foreach (var t in Enum.GetValues<BankAccountType>())
                    {
                        <MudSelectItem Value="@t">@t</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </EditForm>
    }
  </DialogContent>
  <DialogActions>
      <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveAsync" Disabled="@(_account is null)">Save</MudButton>
      <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private BankAccountDto? _account;

    protected override async Task OnParametersSetAsync()
    {
        var list = await MaintApi.GetAccountsAsync();
        _account = list.FirstOrDefault(a => a.Id == Id);
    }

    private async Task SaveAsync()
    {
        if (_account is null) return;
        var updated = await MaintApi.UpdateAccountAsync(_account);
        MudDialog.Close(DialogResult.Ok(updated));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());
}
