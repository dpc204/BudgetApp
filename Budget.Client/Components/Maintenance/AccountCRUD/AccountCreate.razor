@inject IBudgetMaintApiClient MaintApi
<MudDialog >
  <DialogContent>

    @if (_account is null)
    {
      <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
      <EditForm Model="_account" OnValidSubmit="CreateAsync">
        <DataAnnotationsValidator/>
        <MudStack Spacing="2">
          <MudTextField @bind-Value="_account.Name" Label="Name" For="() => _account.Name" Required="true"/>
          <MudNumericField @bind-Value="_account.Balance" Label="Balance" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"/>
          <MudSelect T="BankAccountType" @bind-Value="_account.AccountType" Label="Type" Required="true">
            @foreach (var t in Enum.GetValues<BankAccountType>())
            {
              <MudSelectItem Value="@t">@t</MudSelectItem>
            }
          </MudSelect>
          <MudStack Row Spacing="1" Class="mt-2 justify-end">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Create</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
          </MudStack>
        </MudStack>
      </EditForm>
    }
  </DialogContent>
 
</MudDialog>

@code {
  [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
  private BankAccountDto? _account;
  private void Close() => MudDialog.Close(DialogResult.Cancel());

  protected override Task OnInitializedAsync()
  {
    _account = new BankAccountDto();
    return Task.CompletedTask;
  }

  private async Task CreateAsync()
  {
    var created = await MaintApi.AddAccountAsync(_account!);
    MudDialog.Close(DialogResult.Ok(true));
  }

  private void Cancel()
  {
    MudDialog.Close(DialogResult.Cancel());
  }

}