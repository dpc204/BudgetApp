@using Budget.Client.Components.Shared
@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Class="mb-2">Accounts</MudText>

@if (_accounts is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="ShowCreate" StartIcon="@Icons.Material.Filled.Add">New</MudButton>
    <MudTable Items="_accounts" Hover="true" Dense="true" Class="mt-2" Elevation="0">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh>Type</MudTh>
            <MudTh style="width:220px;"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Balance">@context.Balance.ToString("C")</MudTd>
            <MudTd DataLabel="Type">@context.AccountType</MudTd>
            <MudTd Class="d-flex gap-1 justify-end">
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => BeginEdit(context.Id)">Edit</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info" OnClick="() => ViewDetails(context.Id)">Details</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" OnClick="() => BeginDelete(context.Id)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class="pa-4" Color="Color.Secondary">No accounts</MudText>
        </NoRecordsContent>
    </MudTable>
}

@code {
    private List<BankAccountDto>? _accounts;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        _accounts = (await MaintApi.GetAccountsAsync()).OrderBy(a => a.Name).ToList();
    }

    private async Task ShowCreate()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<AccountCreate>("Create Account", options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }

    private async Task BeginEdit(int id)
    {
        var parameters = new DialogParameters { [nameof(AccountEdit.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<AccountEdit>("Edit Account", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }

    private async Task ViewDetails(int id)
    {
        var parameters = new DialogParameters { [nameof(AccountDetails.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        await DialogService.ShowAsync<AccountDetails>("Account Details", parameters, options);
    }

    private async Task BeginDelete(int id)
    {
        var parameters = new DialogParameters { [nameof(AccountDelete.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<AccountDelete>("Delete Account", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }
}
