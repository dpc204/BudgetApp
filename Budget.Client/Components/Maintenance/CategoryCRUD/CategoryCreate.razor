@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<MudDialog>
  <DialogContent>
    @if (_category is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <EditForm Model="_category" OnValidSubmit="CreateAsync">
            <DataAnnotationsValidator />
            <MudStack Spacing="2">
                <MudTextField @bind-Value="_category.Name" Label="Name" For="() => _category.Name" Required="true" />
                <MudTextField @bind-Value="_category.Description" Label="Description" For="() => _category.Description" />
                <MudNumericField @bind-Value="_category.SortOrder" Label="Sort" />
            </MudStack>
        </EditForm>
    }
  </DialogContent>
  <DialogActions>
      <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(_category is null)" OnClick="CreateAsync">Create</MudButton>
      <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    private CategoryDto? _category;

    protected override Task OnInitializedAsync()
    {
        _category = new CategoryDto();
        return Task.CompletedTask;
    }

    private async Task CreateAsync()
    {
        if (_category is null) return;
        var created = await MaintApi.AddCategoryAsync(_category);
        MudDialog.Close(DialogResult.Ok(created));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());
}
