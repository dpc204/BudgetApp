@using Budget.Client.Components.Shared
@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<h3>Envelopes</h3>

@if (_envelopes is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-sm btn-primary" @onclick="ShowCreate">New</button>
    <table class="table table-striped mt-2">
        <thead>
        <tr>
            <th>Category</th>
            <th>Name</th>
            <th>Budget</th>
            <th>Balance</th>
            <th>Description</th>
            <th>Sort</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var e in _envelopes)
        {
            <tr>
                <td>@GetCategoryName(e.CategoryId)</td>
                <td>@e.Name</td>
                <td>@e.Budget</td>
                <td>@e.Balance</td>
                <td>@e.Description</td>
                <td>@e.SortOrder</td>
                <td>
                    <button class="btn btn-sm btn-secondary me-1" @onclick="() => BeginEdit(e.Id)">Edit</button>
                    <button class="btn btn-sm btn-info me-1" @onclick="() => ViewDetails(e.Id)">Details</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => BeginDelete(e.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<ModalDialog Title="Create Envelope" @bind-Visible="_showCreate">
    @if (_showCreate)
    {
        <EnvelopeCreate OnCreated="HandleCreated" OnCancel="CloseDialogs" />
    }
</ModalDialog>

<ModalDialog Title="Edit Envelope" @bind-Visible="_showEdit">
    @if (_showEdit && _editId.HasValue)
    {
        <EnvelopeEdit Id="_editId.Value" OnSaved="HandleSaved" OnCancel="CloseDialogs" />
    }
</ModalDialog>

<ModalDialog Title="Envelope Details" @bind-Visible="_showDetails">
    @if (_showDetails && _detailsId.HasValue)
    {
        <EnvelopeDetails Id="_detailsId.Value" OnClose="CloseDialogs" />
    }
</ModalDialog>

<ModalDialog Title="Delete Envelope" @bind-Visible="_showDelete" CssClass="modal-danger">
    @if (_showDelete && _deleteId.HasValue)
    {
        <EnvelopeDelete Id="_deleteId.Value" OnDeleted="HandleDeleted" OnCancel="CloseDialogs" />
    }
</ModalDialog>

@code {
    private List<EnvelopeDto>? _envelopes;
    private Dictionary<int,string> _categoryLookup = new();
    private bool _showCreate;
    private bool _showEdit;
    private bool _showDetails;
    private bool _showDelete;
    private int? _editId;
    private int? _detailsId;
    private int? _deleteId;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        var categories = await MaintApi.GetCategoriesAsync();
        _categoryLookup = categories.ToDictionary(c => c.Id, c => c.Name);
        _envelopes = (await MaintApi.GetEnvelopesDtoAsync()).ToList();
    }

    private string GetCategoryName(int id) => _categoryLookup.TryGetValue(id, out var name) ? name : string.Empty;

    private void ShowCreate() => _showCreate = true;
    private void BeginEdit(int id) { _editId = id; _showEdit = true; }
    private void ViewDetails(int id) { _detailsId = id; _showDetails = true; }
    private void BeginDelete(int id) { _deleteId = id; _showDelete = true; }

    private async Task HandleCreated(EnvelopeDto _) => await ReloadAndClose();
    private async Task HandleSaved(EnvelopeDto _) => await ReloadAndClose();
    private async Task HandleDeleted(int _) => await ReloadAndClose();

    private async Task ReloadAndClose()
    {
        CloseDialogs();
        await LoadAsync();
        StateHasChanged();
    }

    private void CloseDialogs()
    {
        _showCreate = _showEdit = _showDetails = _showDelete = false;
        _editId = _detailsId = _deleteId = null;
    }
}
