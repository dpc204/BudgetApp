@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Class="mb-2">Envelopes</MudText>

@if (_envelopes is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="ShowCreate">New</MudButton>
    
    <MudDataGrid Items="@_envelopes"
                 Hover="true"
                 Dense="true"
                 FixedHeader="true"
                 Class="envelopes-table">
      <Columns>
        <TemplateColumn Title="">
          <CellTemplate Context="ctx">
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Size="Size.Small"
                           Variant="Variant.Outlined"
                           Color="Color.Primary"
                          />
          </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="Envelope" HeaderStyle="min-width: 16rem;" />
        <TemplateColumn Title="Balance"
                        TitleClass="text-end"
                        CellClass="text-end"
                    >
          <CellTemplate Context="ctx">
            @ctx.Item.Balance.ToString("N2")
          </CellTemplate>

        </TemplateColumn> <TemplateColumn Title="Budget"
                                          TitleClass="text-end"
                                          CellClass="text-end"
                                          HeaderStyle="text-align: right;"
                                          CellStyle="text-align: right;">
          <CellTemplate Context="ctx">
            @ctx.Item.Budget.ToString("N2")
          </CellTemplate>
        </TemplateColumn>

      </Columns>
    </MudDataGrid>
    
    
    <MudTable Items="_envelopes" Hover="true" Dense="true" Class="mt-2" Elevation="0">
        <HeaderContent>
            <MudTh>Category</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Budget</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Sort</MudTh>
            <MudTh style="width:240px;"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Category">@GetCategoryName(context.CategoryId)</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Budget">@context.Budget</MudTd>
            <MudTd DataLabel="Balance">@context.Balance</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Sort">@context.SortOrder</MudTd>
            <MudTd Class="d-flex gap-1 justify-end">
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => BeginEdit(context.Id)">Edit</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info" OnClick="() => ViewDetails(context.Id)">Details</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" OnClick="() => BeginDelete(context.Id)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class="pa-4" Color="Color.Secondary">No envelopes</MudText>
        </NoRecordsContent>
    </MudTable>
}

@code {
    private List<EnvelopeDto>? _envelopes;
    private Dictionary<int,string> _categoryLookup = new();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        var categories = await MaintApi.GetCategoriesAsync();
        _categoryLookup = categories.ToDictionary(c => c.Id, c => c.Name);
        _envelopes = (await MaintApi.GetEnvelopesDtoAsync()).OrderBy(e => e.SortOrder).ThenBy(e => e.Name).ToList();
    }

    private string GetCategoryName(int id) => _categoryLookup.TryGetValue(id, out var name) ? name : string.Empty;

    private async Task ShowCreate()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<EnvelopeCreate>("Create Envelope", options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }

    private async Task BeginEdit(int id)
    {
        var parameters = new DialogParameters { [nameof(EnvelopeEdit.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<EnvelopeEdit>("Edit Envelope", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }

    private async Task ViewDetails(int id)
    {
        var parameters = new DialogParameters { [nameof(EnvelopeDetails.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        await DialogService.ShowAsync<EnvelopeDetails>("Envelope Details", parameters, options);
    }

    private async Task BeginDelete(int id)
    {
        var parameters = new DialogParameters { [nameof(EnvelopeDelete.Id)] = id };
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<EnvelopeDelete>("Delete Envelope", parameters, options);
        var result = await dialogRef.Result;
        if (!result.Canceled)
            await LoadAsync();
    }
}
