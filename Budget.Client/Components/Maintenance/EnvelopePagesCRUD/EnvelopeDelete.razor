@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<MudDialog>
  <DialogContent>
    @if (_envelope is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Delete Envelope</MudText>
            <MudAlert Severity="Severity.Warning" Dense="true">This action cannot be undone.</MudAlert>
            <MudText>Are you sure you want to delete <strong>@_envelope.Name</strong>?</MudText>
        </MudStack>
    }
  </DialogContent>
  <DialogActions>
      <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="@(_envelope is null)" OnClick="DeleteAsync">Delete</MudButton>
      <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private EnvelopeDto? _envelope;

    protected override async Task OnParametersSetAsync()
    {
        var list = await MaintApi.GetEnvelopesDtoAsync();
        _envelope = list.FirstOrDefault(e => e.Id == Id);
    }

    private async Task DeleteAsync()
    {
        if (_envelope is null) return;
        await MaintApi.RemoveEnvelopeAsync(_envelope.Id);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());
}
