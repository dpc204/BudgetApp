@using Budget.Shared.Models
@using Budget.Shared.Services
@inject IBudgetMaintApiClient MaintApi

<MudDialog>
  <DialogContent>
    @if (_envelope is null || _categories is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <EditForm Model="_envelope" OnValidSubmit="CreateAsync">
            <DataAnnotationsValidator />
            <MudStack Spacing="2">
                <MudSelect T="int" @bind-Value="_envelope.CategoryId" Label="Category" Required="true">
                    @foreach (var c in _categories)
                    {
                        <MudSelectItem Value="@c.Id">@c.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="_envelope.Name" Label="Name" Required="true" />
                <MudNumericField @bind-Value="_envelope.Budget" Label="Budget" />
                <MudNumericField @bind-Value="_envelope.Balance" Label="Balance" />
                <MudNumericField @bind-Value="_envelope.SortOrder" Label="Sort" />
                <MudTextField @bind-Value="_envelope.Description" Label="Description" />
            </MudStack>
        </EditForm>
    }
  </DialogContent>
  <DialogActions>
      <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(_envelope is null)" OnClick="CreateAsync">Create</MudButton>
      <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    private EnvelopeDto? _envelope;
    private List<CategoryDto>? _categories;

    protected override async Task OnInitializedAsync()
    {
        _envelope = new EnvelopeDto();
        _categories = (await MaintApi.GetCategoriesAsync()).OrderBy(c => c.SortOrder).ThenBy(c => c.Name).ToList();
        if (_categories.Count > 0)
            _envelope.CategoryId = _categories[0].Id;
    }

    private async Task CreateAsync()
    {
        if (_envelope is null) return;
        var created = await MaintApi.AddAsync(_envelope);
        MudDialog.Close(DialogResult.Ok(created));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());
}
