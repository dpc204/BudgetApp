@using MudBlazor
@using InputType = MudBlazor.InputType

<MudDialog >
  <DialogContent>
    <MudForm @ref="_form" Model="_header">
      <MudGrid Class="mb-2">
        <MudItem xs="12" md="5">
          <MudTextField @ref="_vendorField" T="string" @bind-Value="_header.Vendor" Label="Vendor" Required="true" Immediate="true"  />
        </MudItem>
        <MudItem xs="12" md="3">
          <MudDatePicker @bind-Date="HeaderDate" Label="Date" MaxDate="@DateTime.Today" />
        </MudItem>
        <MudItem xs="12" md="2">
          <MudText Class="form-label mb-0 small text-muted">Total</MudText>
          <MudText Typo="Typo.subtitle2" Class="fw-bold">@_header.TotalAmount.ToString("C")</MudText>
        </MudItem>
        <MudItem xs="12" md="2" Class="text-end">
          @* Save button in footer *@
        </MudItem>
      </MudGrid>

      <MudTable Items="@_lines" Dense="true" Hover="true" Elevation="0">
        <ToolBarContent>
          <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary"
                     StartIcon="@Icons.Material.Filled.Add" OnClick="AddLine">Add Line</MudButton>
        </ToolBarContent>
        <HeaderContent>
          <MudTh>Envelope</MudTh>
          <MudTh class="text-end">Amount</MudTh>
          <MudTh>Note</MudTh>
          <MudTh style="width:90px;"></MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd>
            <MudSelect T="int" @bind-Value="context.EnvelopeId"  Dense="true">
              @foreach (var e in Envelopes)
              {
                <MudSelectItem Value="@e.Id">@e.Name</MudSelectItem>
              }
            </MudSelect>
          </MudTd>
          <MudTd Class="text-end">
            <MudNumericField T="decimal"
                             @bind-Value="context.Amount"
                             For="@(() => context.Amount)"
                             @bind-Value:after="() => NormalizeAmount(context)"
                             Immediate="true"
                             Min="0.01m"
                             Format="C2"
                             HideSpinButtons="true"
                             Validation="ValidateAmount"
                 />
            
        

          </MudTd>
          <MudTd>
            <MudTextField @bind-Value="context.Note" Immediate="true" Placeholder="Note (optional)" />
          </MudTd>
          <MudTd Class="text-end">
            <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error"
                           OnClick="@(() => DeleteLine(context))" Disabled="@(_lines.Count <= 1)" />
          </MudTd>
        </RowTemplate>
        <NoRecordsContent>
          <MudText Class="pa-2" Color="Color.Secondary">No line items. Click Add to begin.</MudText>
        </NoRecordsContent>
      </MudTable>
    </MudForm>
  </DialogContent>
  <DialogActions>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@IsSaveDisabled" OnClick="SaveFromFooter">Save</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public int InitialEnvelopeId { get; set; }

  private MudForm? _form;
  private PurchaseHeader _header = new();
  private readonly List<PurchaseLine> _lines = new();
  private List<EnvelopeDto> Envelopes = new();

  private bool IsSaveDisabled =>
    string.IsNullOrWhiteSpace(_header.Vendor) ||
    _header.Vendor.Length > 100 ||
    _header.Date.Date > DateTime.Today ||
    !_lines.Any() ||
    _lines.Any(l => l.Amount <= 0);

  [Inject] private IBudgetApiClient Api { get; set; } = default!;

  private MudTextField<string>? _vendorField;

  protected override void OnAfterRender(bool firstRender)
  {
    base.OnAfterRender(firstRender);

    // if(_vendorField != null)
    //   _vendorField.FocusAsync();
  }

  protected override async Task OnInitializedAsync()
  {
    if (!Envelopes.Any())
    {
      Envelopes = await Api.GetEnvelopesAsync();
    }
    if (!_lines.Any())
    {
      _lines.Add(new PurchaseLine { EnvelopeId = InitialEnvelopeId, Amount = 0 });
      Recalc();
    }
  }

  private DateTime? HeaderDate
  {
    get => _header.Date;
    set
    {
      if (value.HasValue)
        _header.Date = value.Value;
      StateHasChanged();
    }
  }

  private void AddLine()
  {
    _lines.Add(new PurchaseLine { EnvelopeId = InitialEnvelopeId });
    Recalc();
  }

  private void DeleteLine(PurchaseLine line)
  {
    _lines.Remove(line);
    Recalc();
  }

  private void NormalizeAmount(PurchaseLine line)
  {
    // Clamp to >= 0 and round to 2 decimals
    var v = Math.Round(line.Amount < 0 ? 0 : line.Amount, 2, MidpointRounding.AwayFromZero);
    if (v != line.Amount)
      line.Amount = v;
    Recalc();
  }

  private void Recalc()
  {
    _header.TotalAmount = _lines.Sum(l => l.Amount);
    StateHasChanged();
  }

  private async Task SaveFromFooter()
  {
    if (_form is not null)
    {
      await _form.Validate();
      if (!_form.IsValid)
        return;
    }
    await HandleSaveAsync();
  }

  private Task HandleSaveAsync()
  {
    if (IsSaveDisabled) return Task.CompletedTask;

    var result = new PurchaseTransactionResult
    {
      Vendor = _header.Vendor.Trim(),
      Date = _header.Date.Date,
      Lines = _lines.Select((l,i) => new PurchaseTransactionLine
      {
        LineNumber = i + 1,
        EnvelopeId = l.EnvelopeId,
        Amount = l.Amount,
        Note = l.Note?.Trim() ?? string.Empty
      }).ToList(),
      TotalAmount = _header.TotalAmount
    };

    MudDialog.Close(DialogResult.Ok(result));
    return Task.CompletedTask;
  }


  private decimal Allowance { get; set; } = 0.00m;

  private string AllowanceString
  {
    get => Allowance.ToString("0.00");
    set
    {
      if (decimal.TryParse(value, out var result))
        Allowance = Math.Truncate(result * 100) / 100m;
    }
  }

  private Dictionary<string, object> inputAttributes = new()
  {
    { "oninput", "limitDecimalPlaces(this, 2)" }
  };
  private void Cancel() => MudDialog.Cancel();

  private class PurchaseHeader
  {
    [System.ComponentModel.DataAnnotations.Required, System.ComponentModel.DataAnnotations.MaxLength(100)] public string Vendor { get; set; } = string.Empty;
    [System.ComponentModel.DataAnnotations.Required] public DateTime Date { get; set; } = DateTime.Today;
    public decimal TotalAmount { get; set; }
  }

  private class PurchaseLine
  {
    public int EnvelopeId { get; set; }
    [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)] public decimal Amount { get; set; }
    public string? Note { get; set; }
  }

  public sealed class PurchaseTransactionResult
  {
    public string Vendor { get; set; } = string.Empty;
    public DateTime Date { get; set; }
    public decimal TotalAmount { get; set; }
    public List<PurchaseTransactionLine> Lines { get; set; } = new();
  }

  public sealed class PurchaseTransactionLine
  {
    public int LineNumber { get; set; }
    public int EnvelopeId { get; set; }
    public decimal Amount { get; set; }
    public string Note { get; set; } = string.Empty;
  }



  private string? ValidateAmount(decimal value)
  {
    if (value <= 0m)
      return "Amount must be greater than 0.";
    // allow at most 2 decimal places
    if ((value * 100m) % 1m != 0m)
      return "Maximum of two decimal places.";
    return null;
  }

}

<style>
  .purchase-dialog .e-dlg-content { padding-top: .75rem; }
  .purchase-dialog table td { vertical-align: middle; }
</style>
